-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


ALTER TABLE IF EXISTS public.groups DROP CONSTRAINT IF EXISTS "groupOwnerID";

ALTER TABLE IF EXISTS public.user_group_linker DROP CONSTRAINT IF EXISTS fk_accountid;

ALTER TABLE IF EXISTS public.user_group_linker DROP CONSTRAINT IF EXISTS fk_groupid;

ALTER TABLE IF EXISTS public.review DROP CONSTRAINT IF EXISTS "accountID_movieReview";

ALTER TABLE IF EXISTS public.groupposts DROP CONSTRAINT IF EXISTS groupid;

ALTER TABLE IF EXISTS public.favoritemovies DROP CONSTRAINT IF EXISTS fk_accountid;



DROP TABLE IF EXISTS public.account;

CREATE TABLE IF NOT EXISTS public.account
(
    accountid serial,
    username character varying(32) NOT NULL,
    email character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    "registrationDate" timestamp with time zone DEFAULT CURRENT_TIMESTAMP(0),
    PRIMARY KEY (accountid),
    CONSTRAINT "UniqueUsernamesOnly" UNIQUE (username),
    CONSTRAINT "UniqueEmailsOnly" UNIQUE (email)
);

DROP TABLE IF EXISTS public.groups;

CREATE TABLE IF NOT EXISTS public.groups
(
    groupid serial,
    fk_ownerid integer NOT NULL,
    groupname character varying(32) NOT NULL,
    groupdescription text,
    PRIMARY KEY (groupid),
    CONSTRAINT "UniqueGroupNamesOnly" UNIQUE (groupname)
);

DROP TABLE IF EXISTS public.user_group_linker;

CREATE TABLE IF NOT EXISTS public.user_group_linker
(
    fk_groupid integer NOT NULL,
    fk_accountid integer NOT NULL,
    PRIMARY KEY (fk_groupid, fk_accountid)
);

DROP TABLE IF EXISTS public.review;

CREATE TABLE IF NOT EXISTS public.review
(
    reviewid serial,
    movieid integer NOT NULL,
    stars integer NOT NULL,
    fk_accountid integer NOT NULL,
    reviewtext character varying(1000),
    reviewdate timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP(0),
    PRIMARY KEY (reviewid),
    CONSTRAINT "avoidReviewBombing" UNIQUE (movieid, fk_accountid)
);

DROP TABLE IF EXISTS public.groupposts;

CREATE TABLE IF NOT EXISTS public.groupposts
(
    postid serial,
    fk_groupid integer NOT NULL,
    posttext character varying(1000),
    movieid integer,
    postdate timestamp with time zone DEFAULT CURRENT_TIMESTAMP(0),
    PRIMARY KEY (postid)
);

DROP TABLE IF EXISTS public.favoritemovies;

CREATE TABLE IF NOT EXISTS public.favoritemovies
(
    favmovieid serial,
    fk_accountid integer NOT NULL,
    movieid integer NOT NULL,
    PRIMARY KEY (favmovieid),
    CONSTRAINT uq_favorites_account_movie UNIQUE (fk_accountid, movieid)
);

ALTER TABLE IF EXISTS public.groups
    ADD CONSTRAINT "groupOwnerID" FOREIGN KEY (fk_ownerid)
    REFERENCES public.account (accountid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS public.user_group_linker
    ADD CONSTRAINT fk_accountid FOREIGN KEY (fk_accountid)
    REFERENCES public.account (accountid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_group_linker
    ADD CONSTRAINT fk_groupid FOREIGN KEY (fk_groupid)
    REFERENCES public.groups (groupid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.review
    ADD CONSTRAINT "stars_range" CHECK (stars BETWEEN 1 AND 5),
    ADD CONSTRAINT "accountID_movieReview" FOREIGN KEY (fk_accountid)
    REFERENCES public.account (accountid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.groupposts
    ADD CONSTRAINT groupid FOREIGN KEY (fk_groupid)
    REFERENCES public.groups (groupid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.favoritemovies
    ADD CONSTRAINT fk_accountid FOREIGN KEY (fk_accountid)
    REFERENCES public.account (accountid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;